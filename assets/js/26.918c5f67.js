(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{379:function(t,a,s){"use strict";s.r(a);var e=s(42),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"github入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github入门"}},[t._v("#")]),t._v(" Github入门")]),t._v(" "),s("p",[t._v("学习来源："),s("a",{attrs:{href:"http://www.imooc.com/wiki/github",target:"_blank",rel:"noopener noreferrer"}},[t._v("慕课教程"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"安装与配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装与配置"}},[t._v("#")]),t._v(" 安装与配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git --version  \n")])])]),s("p",[t._v("验证是否安装成功，如果安装成功，会显示 git 版本号。"),s("br"),t._v("\n因为我的电脑本身就安装了git，所以查看版本后，直接跳过了安装这一步。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('git config --global user.name "username"  \ngit config --global user.email "email" \n')])])]),s("p",[t._v("将 username 和 email 换成 github 的用户名和密码，\n配置完成后执行命令 "),s("code",[t._v("git config --list")]),t._v("，可以查看现在的配置信息。")]),t._v(" "),s("h2",{attrs:{id:"ssh-key-密钥"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh-key-密钥"}},[t._v("#")]),t._v(" ssh key 密钥")]),t._v(" "),s("p",[t._v("输入 "),s("code",[t._v("cd ~/.ssh")]),t._v("，进入到目录后输入"),s("code",[t._v("ls")]),t._v(" ，查看是否存在密钥。")]),t._v(" "),s("p",[t._v("一般有两个密钥。id_rsa 文件是私钥，不需要上传，id_rsa.pub 文件是公钥，是需要上传的。")]),t._v(" "),s("p",[t._v("如果没有，则需要手动生成，通过下面的命令生成 ssh key：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('ssh-keygen -t rsa -C "youremail@example.com"\n')])])]),s("p",[t._v("这里的邮箱可以就填你 github 绑定的邮箱，然后一直回车即可完成当前步骤。")]),t._v(" "),s("p",[t._v("登录 Github，打开 setting -> SSH keys，点击右上角 New SSH key。\n把生成好的公钥 id_rsa.pub 放进 key 输入框中，再为当前的 key 起一个 title 即可。")]),t._v(" "),s("h2",{attrs:{id:"把在github上建立的仓库放到本地"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把在github上建立的仓库放到本地"}},[t._v("#")]),t._v(" 把在github上建立的仓库放到本地")]),t._v(" "),s("p",[t._v("进入到仓库，点击“Clone or download”，复制仓库地址\n输入"),s("code",[t._v("git clone")]),t._v("，然后点击鼠标右键，把我们刚才复制的仓库地址粘贴在这里，按下回车后代码就可以下载到本地文件夹下面了。")]),t._v(" "),s("h2",{attrs:{id:"修改并上传"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改并上传"}},[t._v("#")]),t._v(" 修改并上传")]),t._v(" "),s("h3",{attrs:{id:"git-add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),s("p",[t._v("完成修改后，第一步，需要将修改的文件添加到暂存区。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git add <path> \n")])])]),s("p",[t._v("把指定的具体文件添加到暂存区")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git add .\n")])])]),s("p",[t._v("把所有修改的文件都添加")]),t._v(" "),s("h3",{attrs:{id:"为啥要有暂存区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为啥要有暂存区"}},[t._v("#")]),t._v(" 为啥要有暂存区？")]),t._v(" "),s("p",[t._v("有时候你一次性修改了许多文件，然而其实这些文件，有些跟需求 A 有关，有些跟需求 B 有关，因为实际工作中，大多数时候我们都是多个需求并行开发的，明明是两个独立的需求，你一次就把所有修改的文件全部提交上去了，那么就不能保证提交历史的清晰。")]),t._v(" "),s("p",[t._v("所以这时候文件的选择就可以交给暂存区去做，每一次提交都是一个完整的功能开发，保证提交历史干净清晰。")]),t._v(" "),s("h3",{attrs:{id:"git-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),s("p",[t._v("将暂存区里的文件给提交到本地的版本库")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('git commit -m "message"\n')])])]),s("p",[s("code",[t._v("message")]),t._v("的内容是本次提交的说明")]),t._v(" "),s("h3",{attrs:{id:"小技巧-help"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小技巧-help"}},[t._v("#")]),t._v(" 小技巧 --help")]),t._v(" "),s("p",[t._v("如果当你使用某个命令不知道要加什么参数的时候，可以使用 help 命令。"),s("br"),t._v("\n例如这里，使用"),s("code",[t._v("git commit --help")]),t._v("，就可以跳转到官网相关文档。")]),t._v(" "),s("h3",{attrs:{id:"git-push"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),s("p",[t._v("在使用"),s("code",[t._v("git commit")]),t._v("命令将修改从暂存区提交到本地版本库后，"),s("br"),t._v("\n只剩下最后一步将 本地 版本库的分支推送到 远程服务器 上对应的分支了。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git push origin <远程分支名>\n")])])]),s("p",[t._v("如果该远程分支不存在，则会被新建。"),s("br"),t._v("\n如果当前分支只有一个远程分支，那么命令可以直接简化成"),s("code",[t._v("git push")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"向开源库贡献代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向开源库贡献代码"}},[t._v("#")]),t._v(" 向开源库贡献代码")]),t._v(" "),s("h3",{attrs:{id:"fork、clone、添加"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fork、clone、添加"}},[t._v("#")]),t._v(" fork、clone、添加")]),t._v(" "),s("p",[t._v("先 fork 到自己的仓库。一般情况下，别人的仓库，我们是没有权限直接向他们的分支提交代码的，所以要先 fork 到自己的仓库。")]),t._v(" "),s("p",[t._v("将刚才 fork 的代码 clone 到本地，然后进入到项目目录，添加原项目地址："),s("br"),t._v("\n（以ant-design 的 git 地址为例）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git remote add upstream https://github.com/ant-design/ant-design.git\n")])])]),s("p",[t._v("大多数情况下，在自己开发过程中，原项目也在不断的更新，所以要添加远程项目地址，方便随时和原项目代码保持同步。")]),t._v(" "),s("h3",{attrs:{id:"获取最新代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取最新代码"}},[t._v("#")]),t._v(" 获取最新代码")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git pull upstream master\n")])])]),s("h3",{attrs:{id:"创建分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[t._v("#")]),t._v(" 创建分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git checkout -b\n")])])]),s("p",[t._v("大多数情况下，我们不会直接修改 master 分支，而是根据修改的内容新建分支。"),s("br"),t._v("\n比如你是想修改 bug 则可以创建一个 bugfix 分支；你是想新增特性，可以创建一个 feature 分支。"),s("br"),t._v("\n分支取名最好有意义，而且简洁，例如可执行如下命令：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git checkout -b bugfix\n")])])]),s("p",[t._v("接下来我们就可以在新分支上修改代码，修改完成后提交 commit 到代码库。")]),t._v(" "),s("h3",{attrs:{id:"合并修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并修改"}},[t._v("#")]),t._v(" 合并修改")]),t._v(" "),s("p",[t._v("当你修改完成的时候，原项目代码可能已经更新过了，所以在这里，就需要我们同步一次，不然到时候合代码可能会产生冲突而不允许合入。")]),t._v(" "),s("p",[t._v("首先切换到 master 分支，执行如下命令：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git checkout master\n")])])]),s("p",[t._v("然后，同步最新的远程代码：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git pull upstream master\n")])])]),s("p",[t._v("然后切回到 bugfix 分支：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git checkout bugfix\n")])])]),s("p",[t._v("把 master 分支的最新 commit 合并到 bugfix 分支：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git rebase master\n")])])]),s("p",[t._v("最后，就可以把现在的代码 push 到远端的 bugfix 分支了：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("git push origin bugfix\n")])])]),s("h3",{attrs:{id:"提交-pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交-pull-request"}},[t._v("#")]),t._v(" 提交 Pull Request")]),t._v(" "),s("p",[t._v("可以进入到你自己的远端项目主页，点击 New pull request 按钮，然后选择你的 bugfix 分支和原项目仓库的 master 分支，提交申请，等待作者进行代码 review 并合并。"),s("br"),t._v("\n如果 review 不合格，作者会提示你修改，按照作者的提示修改好后重新提交代码即可。")]),t._v(" "),s("h2",{attrs:{id:"github-pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github-pages"}},[t._v("#")]),t._v(" GitHub Pages")]),t._v(" "),s("p",[t._v("我们可以把项目代码写好后上传 GitHub，然后利用 GitHub Pages 为这个项目生成一个静态页面，别人通过网址可以访问我们的页面。")]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ol",[s("li",[t._v("免费，不需要再购买云服务，就可以搭建个人网站；")]),t._v(" "),s("li",[t._v("简单，步骤简单，只需要按着教程一步步来，无需关注技术细节；")]),t._v(" "),s("li",[t._v("功能多，生态链丰富，你可以绑定自己域名，使用免费 https，还能使用现成的主题，插件等；")]),t._v(" "),s("li",[t._v("省心，只需要负责搭建，不需要关心如何维护之类的。")])]),t._v(" "),s("p",[t._v("作为免费的服务，当然也有一些限制："),s("br"),t._v("\n在使用的时候项目和网站的大小不要超过 1 GB，每个月的带宽使用上限为 100 GB。")]),t._v(" "),s("h2",{attrs:{id:"一些技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一些技巧"}},[t._v("#")]),t._v(" 一些技巧")]),t._v(" "),s("h3",{attrs:{id:"fork-star-watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fork-star-watch"}},[t._v("#")]),t._v(" fork，star，watch")]),t._v(" "),s("ol",[s("li",[t._v("想拷贝别人项目到自己帐号下就fork一下；")]),t._v(" "),s("li",[t._v("持续关注别人项目更新就star一下；")]),t._v(" "),s("li",[t._v("watch是设置接收邮件提醒的。")])]),t._v(" "),s("h3",{attrs:{id:"搜索技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#搜索技巧"}},[t._v("#")]),t._v(" 搜索技巧")]),t._v(" "),s("p",[t._v("假设我的项目中要使用一个可以随意拖拽的组件，而且我的项目是基于 React 技术栈，想在 GitHub 上面找下有没有现成的组件可以使用。")]),t._v(" "),s("ol",[s("li",[t._v("明确关键字：drag react")]),t._v(" "),s("li",[t._v("语言类型：比如，我项目里面用到的是 Typescript，就可以在左边 Languages 模块点击 Typescript 标签")]),t._v(" "),s("li",[t._v("排序：Best match 或者 Most stars")])]),t._v(" "),s("p",[t._v("按着排序的结果依次点进去看看，绝大多数情况下，我们都可以在排名靠前的几个搜索结果里面找到我们想要的项目。")]),t._v(" "),s("h3",{attrs:{id:"快捷键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快捷键"}},[t._v("#")]),t._v(" 快捷键")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("shift + ?\n在 GitHub 页面中按下 shift + ? 则可以调出快捷键页面"),s("br"),t._v("\n（注意：经过测试，要在英文输入法下使用才能调出）")])]),t._v(" "),s("li",[s("p",[t._v("最常用的：s键或/键，直接定位到搜索框。")])]),t._v(" "),s("li",[s("p",[t._v("快捷键 t 堪称查看源代码的神器。\n当你在查看开源项目的源码时，在目录结构的页面中按下 t ，页面会发生变化，进入文件查找模式。")])])]),t._v(" "),s("ul",[s("li",[t._v("什么叫文件查找模式？\n比如，我想查找这个项目里面跟 button 有关的文件，那我们不妨进入文件查找模式，输入 “button” 试试。"),s("br"),t._v("\n之后，下面的文件列表列出来的都是跟 button 有关的文件，这样就能快速定位到我们想要查看的文件。")])]),t._v(" "),s("h3",{attrs:{id:"代码高亮、标注单行代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码高亮、标注单行代码"}},[t._v("#")]),t._v(" 代码高亮、标注单行代码")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("代码高亮："),s("br"),t._v("\n只需要在发给别人的 GitHub 链接后面加上 #L 和行号就行了。"),s("br"),t._v("\n例如，我想把第 4 行标记出来，则需要在链接最后面加上"),s("code",[t._v("#L4")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("标注单行代码\n标注多行代码，需要用 “-” 连接起来即可，例如我想标记第 4 行到第 6 行，则链接后面需要加上"),s("code",[t._v("#L4-L6")]),t._v("。")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);